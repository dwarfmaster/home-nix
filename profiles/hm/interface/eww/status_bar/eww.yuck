
;  _          __ _   
; | |    ___ / _| |_ 
; | |   / _ \ |_| __|
; | |__|  __/  _| |_ 
; |_____\___|_|  \__|
;                    
; Left

(defwindow statusbar-left
           :monitor 0
           :geometry
             (geometry :x "5px"
                       :y "0px"
                       :width "712px"
                       :anchor "top left")
           :stacking "fg"
           :windowtype "dock"
           :wm-ignore false
           :reserve (struts :distance "25px" :side "top")
  (box :class "bar"
       :orientation "horizontal"
    (box :class "topleft"
         :valign "center"
         :halign "start")))



;   ____           _            
;  / ___|___ _ __ | |_ ___ _ __ 
; | |   / _ \ '_ \| __/ _ \ '__|
; | |__|  __/ | | | ||  __/ |   
;  \____\___|_| |_|\__\___|_|   
;                               
; Center

(deflisten workspace :initial "personal"
  `bspdesk watch-workspace`)
(deflisten desktop :initial "r1"
  `bspdesk watch-desktop`)
(defvar hovered-desktop "none")

(defvar desktop-color-0 "#{{{base08}}}")
(defvar desktop-color-1 "#{{{base09}}}")
(defvar desktop-color-2 "#{{{base0A}}}")
(defvar desktop-color-3 "#{{{base0B}}}")
(defvar desktop-color-4 "#{{{base0C}}}")

(defwindow statusbar-center
           :monitor 0
           :geometry
             (geometry :x "722px"
                       :y "0px"
                       :width "476px"
                       :anchor "top left")
           :stacking "fg"
           :windowtype "dock"
           :wm-ignore false
           :reserve (struts :distance "25px" :side "top")
  (box :class "bar"
       :orientation "horizontal"
    (box :class "topcenter"
         :valign "fill"
         :halign "fill"
         :hexpand true
         :vexpand true
         :space-evenly false
         :spacing 0
      (box :hexpand true)
      (desktop :name "l4" :color "${desktop-color-4}")
      (desktop :name "l3" :color "${desktop-color-3}")
      (desktop :name "l2" :color "${desktop-color-2}")
      (desktop :name "l1" :color "${desktop-color-1}")
      (desktop :name "l0" :color "${desktop-color-0}")
      (workspaces)
      (desktop :name "r0" :color "${desktop-color-0}")
      (desktop :name "r1" :color "${desktop-color-1}")
      (desktop :name "r2" :color "${desktop-color-2}")
      (desktop :name "r3" :color "${desktop-color-3}")
      (desktop :name "r4" :color "${desktop-color-4}")
      (box :hexpand true))))

(defwidget workspaces []
  (box :width "50"
       :class "workspace"
    (button
      :onclick "bspdesk focus-select"
      :onmiddleclick "bspdesk send-to-select"
      :onrightclick "bspdesk create-select"
      (label
        :text "${workspace}"))))

(defwidget desktop [name color]
  (box :class "desktop"
       :style "background-color: ${color}"
    (eventbox
      :onhover "eww update hovered-desktop=${name}"
      :onhoverlost "eww update hovered-desktop=none"
      (button
        :onclick "bspdesk focus ${name}"
        :onmiddleclick "bspdesk send-to ${name}"
        :onrightclick "bspdesk focus-select ${name}"
        (image
          :image-width 13
          :image-height 13
          :path { name == desktop ? "center/selected.png" : "center/hovered.png" }
          :visible { name == desktop || name == hovered-desktop })))))




;  ____  _       _     _   
; |  _ \(_) __ _| |__ | |_ 
; | |_) | |/ _` | '_ \| __|
; |  _ <| | (_| | | | | |_ 
; |_| \_\_|\__, |_| |_|\__|
;          |___/           
; Right

(defpoll hour :interval "15s"
              :initial "00"
  `date +%H`)
(defpoll minute :interval "15s"
                :initial "00"
  `date +%M`)

(defwindow statusbar-right
           :monitor 0
           :geometry
             (geometry :x "1203px"
                       :y "0px"
                       :width "712px"
                       :anchor "top left")
           :stacking "fg"
           :windowtype "dock"
           :wm-ignore false
           :reserve (struts :distance "25px" :side "top")
  (box :class "bar"
       :orientation "horizontal"
    (box :class "topright"
         :valign "center"
         :halign "end"
      (right))))

(defwidget time []
  (box :orientation "horizontal"
       :halign "center"
    "îŽ… ${hour}:${minute}"))

(defwidget right []
  (time))

