
;  _          __ _   
; | |    ___ / _| |_ 
; | |   / _ \ |_| __|
; | |__|  __/  _| |_ 
; |_____\___|_|  \__|
;                    
; Left

(defwindow statusbar-left
           :monitor 0
           :geometry
             (geometry :x "5px"
                       :y "0px"
                       :width "712px"
                       :anchor "top left")
           :stacking "fg"
           :windowtype "dock"
           :wm-ignore false
           :reserve (struts :distance "25px" :side "top")
  (box :class "bar"
       :orientation "horizontal"
    (box :class "topleft"
         :valign "fill"
         :halign "fill"
         :hexpand true
         :vexpand true
         :space-evenly false
         :spacing 2
      (cpu)
      (temperature)
      (ram)
      (upload)
      (download))))

(defwidget cpu []
  (box :orientation "horizontal"
       :class "cpu"
       :space-evenly false
       :spacing 2
    (box :class "taskitem"
      (image :image-width {{{item-size}}}
             :image-height {{{item-size}}}
        :path "left/cpu.png"))
    {{#threads}}
    (circular-progress
      :class "cpuprogress"
      :style
        { EWW_CPU.cores[{{thread}}].usage > 90 ? "color: #{{{base08}}}"
        : EWW_CPU.cores[{{thread}}].usage > 15 ? "color: #{{{base09}}}"
        : "color: #{{{base0B}}}" }
      :start-at 25
      :value { EWW_CPU.cores[{{thread}}].usage }
      ; TODO replace tooltip by real window with more data
      :tooltip { EWW_CPU.cores[{{thread}}].usage }
      :clockwise false
      :thickness 8)
    {{/threads}}))

(defwidget temperature []
  (box :orientation "horizontal"
       :class "temp"
       :space-evenly false
       :spacing 2
    (box :class "taskitem"
      (image :image-width {{{item-size}}}
             :image-height {{{item-size}}}
        :path "left/temp.png"))
    {{#cores}}
    (circular-progress
      :class "cputemp"
      :style
        { EWW_TEMPS.CORETEMP_CORE_{{core}} > 85 ? "color: #{{{base08}}}"
        : EWW_TEMPS.CORETEMP_CORE_{{core}} > 50 ? "color: #{{{base09}}}"
        : "color: #{{{base0B}}}" }
      :start-at 25
      :value { EWW_TEMPS.CORETEMP_CORE_{{core}} > 100 ? 100
             : EWW_TEMPS.CORETEMP_CORE_{{core}} }
      :tooltip { EWW_TEMPS.CORETEMP_CORE_{{core}} }
      :clockwise false
      :thickness 8)
    {{/cores}}))

(defwidget ram []
  (box :orientation "horizontal"
       :class "ram"
       :space-evenly false
       :spacing 2
    (box :class "taskitem"
      (image :image-width {{{item-size}}}
             :image-height {{{item-size}}}
        :path "left/memory.png"))
    (circular-progress
      :class "ramusage"
      :style
        { EWW_RAM.used_mem_perc > 75 ? "color: #{{{base08}}}"
        : EWW_RAM.used_mem_perc > 25 ? "color: #{{{base09}}}"
        : "color: #{{{base0B}}}" }
      :start-at 25
      :value { EWW_RAM.used_mem_perc }
      :tooltip { EWW_RAM.used_mem_perc }
      :clockwise false
      :thickness 8)))

(defwidget upload []
  (box :orientation "horizontal"
       :class "upload"
       :space-evenly false
       :spacing 2
    (box :class "taskitem"
      (image :image-width {{{item-size}}}
             :image-height {{{item-size}}}
        :path "left/upload.png"))
    (label
      :style
        { EWW_NET.{{wifi_device}}.NET_UP > 1000000 ? "color: #{{{base08}}}"
        : EWW_NET.{{wifi_device}}.NET_UP > 200000 ? "color: #{{{base09}}}"
        : EWW_NET.{{wifi_device}}.NET_UP > 1000 ? "color: #{{{base04}}}"
        : "color: #{{{base0B}}}" }
      :text
        { EWW_NET.{{wifi_device}}.NET_UP > 1000000 ?
            replace("XMbps", "X", round(EWW_NET.{{wifi_device}}.NET_UP / 1000000, 1))
        : EWW_NET.{{wifi_device}}.NET_UP > 1000 ?
            replace("Xkbps", "X", round(EWW_NET.{{wifi_device}}.NET_UP / 1000, 1))
        : replace("Xbps", "X", EWW_NET.{{wifi_device}}.NET_UP)
        })))

(defwidget download []
  (box :orientation "horizontal"
       :class "download"
       :space-evenly false
       :spacing 2
    (box :class "taskitem"
      (image :image-width {{{item-size}}}
             :image-height {{{item-size}}}
        :path "left/download.png"))
    (label
      :style
        { EWW_NET.{{wifi_device}}.NET_DOWN > 1000000 ? "color: #{{{base08}}}"
        : EWW_NET.{{wifi_device}}.NET_DOWN > 200000 ? "color: #{{{base09}}}"
        : EWW_NET.{{wifi_device}}.NET_DOWN > 1000 ? "color: #{{{base04}}}"
        : "color: #{{{base0B}}}" }
      :text
        { EWW_NET.{{wifi_device}}.NET_DOWN > 1000000 ?
            replace("XMbps", "X", round(EWW_NET.{{wifi_device}}.NET_DOWN / 1000000, 1))
        : EWW_NET.{{wifi_device}}.NET_DOWN > 1000 ?
            replace("Xkbps", "X", round(EWW_NET.{{wifi_device}}.NET_DOWN / 1000, 1))
        : replace("Xbps", "X", EWW_NET.{{wifi_device}}.NET_DOWN)
        })))


;   ____           _            
;  / ___|___ _ __ | |_ ___ _ __ 
; | |   / _ \ '_ \| __/ _ \ '__|
; | |__|  __/ | | | ||  __/ |   
;  \____\___|_| |_|\__\___|_|   
;                               
; Center

(defvar xmonad 
  "{\"workspace\": \"personal\", \"view\": \"l1\"}")
(defvar hovered-desktop "none")

(defvar desktop-color-0 "#{{{base0F}}}")
(defvar desktop-color-1 "#{{{base09}}}")
(defvar desktop-color-2 "#{{{base0A}}}")
(defvar desktop-color-3 "#{{{base0B}}}")
(defvar desktop-color-4 "#{{{base0C}}}")

(defwindow statusbar-center
           :monitor 0
           :geometry
             (geometry :x "722px"
                       :y "0px"
                       :width "476px"
                       :anchor "top left")
           :stacking "fg"
           :windowtype "dock"
           :wm-ignore false
           :reserve (struts :distance "25px" :side "top")
  (box :class "bar"
       :orientation "horizontal"
    (box :class "topcenter"
         :valign "fill"
         :halign "fill"
         :hexpand true
         :vexpand true
         :space-evenly false
         :spacing 0
      (box :hexpand true)
      (desktop :name "l4" :color "${desktop-color-4}")
      (desktop :name "l3" :color "${desktop-color-3}")
      (desktop :name "l2" :color "${desktop-color-2}")
      (desktop :name "l1" :color "${desktop-color-1}")
      (desktop :name "l0" :color "${desktop-color-0}")
      (workspaces)
      (desktop :name "r0" :color "${desktop-color-0}")
      (desktop :name "r1" :color "${desktop-color-1}")
      (desktop :name "r2" :color "${desktop-color-2}")
      (desktop :name "r3" :color "${desktop-color-3}")
      (desktop :name "r4" :color "${desktop-color-4}")
      (box :hexpand true))))

(defwidget workspaces []
  (box :width "50"
       :class "workspace"
    (label
      :text "${xmonad.workspace}")))

(defwidget desktop [name color]
  (box :class "desktop"
       :style { name == hovered-desktop ? "background-color: #{{{base08}}}" 
                                        : "background-color: ${color}" }
    (eventbox
      :onhover "eww update hovered-desktop=${name}"
      :onhoverlost "eww update hovered-desktop=none"
      (image
        :image-width 13
        :image-height 13
        :path "center/active.png"
        :visible { name == xmonad.view }))))




;  ____  _       _     _   
; |  _ \(_) __ _| |__ | |_ 
; | |_) | |/ _` | '_ \| __|
; |  _ <| | (_| | | | | |_ 
; |_| \_\_|\__, |_| |_|\__|
;          |___/           
; Right

(defpoll hour :interval "15s"
              :initial "00"
  `date +%H`)
(defpoll minute :interval "15s"
                :initial "00"
  `date +%M`)

(deflisten backlight :initial "{ \"light\": 50, \"show\": false }"
  `{{{backlight-listener}}}`)
(defvar hover-backlight false)

(deflisten volume :initial "{ \"volume\": 50, \"muted\": false, \"show\": false }"
  `{{{volume-listener}}}`)
(defvar hover-volume false)

(deflisten wifi :initial "{ \"wiki\": \"--\", \"connected\": false, \"blocked\": true }"
  `{{{wifi-listener}}}`)
(defvar hover-wifi false)

(defpoll battery-time :interval "15s"
                      :initial "No data"
  `{{{acpi}}} -b | cut -d, -f 3`)
(defvar hover-battery false)

(defpoll notification-paused :interval "15s"
                             :initial false
  `{{{dunstctl}}} is-paused`)

(defwindow statusbar-right
           :monitor 0
           :geometry
             (geometry :x "1203px"
                       :y "0px"
                       :width "712px"
                       :anchor "top left")
           :stacking "fg"
           :windowtype "dock"
           :wm-ignore false
           :reserve (struts :distance "25px" :side "top")
  (box :class "bar"
       :orientation "horizontal"
    (box :class "topright"
         :valign "fill"
         :halign "fill"
         :hexpand true
         :vexpand true
         :space-evenly false
         :spacing 2
      (box :hexpand true)
      (backlight)
      (volume)
      ; TODO USB ?
      ; TODO bluetooth ?
      ; TODO screens ?
      ; TODO plane mode ?
      (wifi)
      (battery)
      (notification)
      (time)
      (lock))))

(defwidget time []
  (box :orientation "horizontal"
       :class "time"
       :space-evenly false
       :spacing 4
    (box :class "taskitem"
      (image :image-width {{{item-size}}}
             :image-height {{{item-size}}}
        :path "right/time.png"))
    "${hour}:${minute}"))

(defwidget volume []
  (eventbox
    :onhover "eww update hover-volume=true"
    :onhoverlost "eww update hover-volume=false"
    (box :orientation "horizontal"
         :class "volume"
         :space-evenly false
         :spacing 0
      (box :class "taskitem"
        (button
          :onclick "pamixer --toggle-mute"
          (image :image-width {{{item-size}}}
                 :image-height {{{item-size}}}
            :path { volume.muted ? "right/muted.png" 
                  : (volume.volume > 33 ? "right/vol_up.png"
                  : (volume.volume > 0 ? "right/vol_low.png"
                  : "right/vol_zero.png"))})))
      (revealer :transition "slideright"
                :duration "300ms"
                :reveal {hover-volume || volume.show}
        (box :orientation "horizontal"
             :space-evenly false
             :spacing 2
          (box)
          (scale :orientation "horizontal"
                 :onchange "pamixer --set-volume {}"
                 :min 0
                 :max 100
                 :value {volume.volume}
                 :draw-value false
                 :halign "center"
                 :hexpand "true"
                 :width {{{scale-length}}}))))))

(defwidget battery []
  (eventbox
    :onhover "eww update hover-battery=true"
    :onhoverlost "eww update hover-battery=false"
    (box :orientation "horizontal"
         :class "battery"
         :space-evenly false
         :spacing 0
      (box :class "taskitem"
           :style { EWW_BATTERY.{{{bat}}}.status == "Full" ? "background-color: #{{{base0B}}}"
                  : (EWW_BATTERY.{{{bat}}}.capacity < 12.5 ? "background-color: #{{{base08}}}"
                  : "background-color: #{{{base0F}}}")}
        (image :image-width {{{item-size}}}
               :image-height {{{item-size}}}
          :path { EWW_BATTERY.{{{bat}}}.status == "Full" ? "right/battery/full.png" 
                : (EWW_BATTERY.{{{bat}}}.status == "Charging" ? "right/battery/charging.png"
                : (EWW_BATTERY.{{{bat}}}.capacity < 12.5 ? "right/battery/alert.png"
                : (EWW_BATTERY.{{{bat}}}.capacity < 25 ? "right/battery/1.png"
                : (EWW_BATTERY.{{{bat}}}.capacity < 37.5 ? "right/battery/2.png"
                : (EWW_BATTERY.{{{bat}}}.capacity < 50 ? "right/battery/3.png"
                : (EWW_BATTERY.{{{bat}}}.capacity < 62.5 ? "right/battery/4.png"
                : (EWW_BATTERY.{{{bat}}}.capacity < 75 ? "right/battery/5.png"
                : "right/battery/6.png")))))))}))
      (revealer :transition "slideright"
                :duration "300ms"
                :reveal { hover-battery && EWW_BATTERY.{{{bat}}}.status != "Full" }
        (box :orientation "horizontal"
             :space-evenly false
             :spacing 2
          (box)
          (label :text battery-time))))))

(defwidget backlight []
  (eventbox
    :onhover "eww update hover-backlight=true"
    :onhoverlost "eww update hover-backlight=false"
    (box :orientation "horizontal"
         :class "backlight"
         :space-evenly false
         :spacing 0
      (box :class "taskitem"
        (image :image-width {{{item-size}}}
               :image-height {{{item-size}}}
          :path "right/light.png"))
      (revealer :transition "slideright"
                :duration "300ms"
                :reveal {hover-backlight || backlight.show}
        (box :orientation "horizontal"
             :space-evenly false
             :spacing 2
          (box)
          (scale :orientation "horizontal"
                 :onchange "{{{bctl}}} -q s {}%"
                 :min 0
                 :max 100
                 :value {backlight.light}
                 :draw-value false
                 :halign "center"
                 :hexpand "true"
                 :width {{{scale-length}}}))))))

(defwidget wifi []
  (eventbox
    :onhover "eww update hover-wifi=true"
    :onhoverlost "eww update hover-wifi=false"
    (box :orientation "horizontal"
         :class "wifi"
         :space-evenly false
         :spacing 0
      (box :class "taskitem"
        (image :image-width {{{item-size}}}
               :image-height {{{item-size}}}
          :path { wifi.blocked ? "right/wifi/off.png"
                : (wifi.connected ? "right/wifi/connected.png"
                : "right/wifi/no.png") }))
      (revealer :transition "slideright"
                :duration "300ms"
                :reveal { hover-wifi && wifi.connected }
        (box :orientation "horizontal"
             :space-evenly false
             :spacing 2
          (box)
          (label :text { wifi.wifi }))))))

(defwidget lock []
  (box :orientation "horizontal"
       :class "lock"
       :space-evenly false
       :spacing 0
    (box :class "taskitem"
      (button :onclick "{{{locker}}}"
        (image :image-width {{{item-size}}}
               :image-height {{{item-size}}}
          :path "right/lock.png")))))

(defwidget notification []
  (box :orientation "horizontal"
       :class "notification"
       :space-evenly false
       :spacing 0
    (box :class "taskitem"
      (button :onclick "{{{dunstctl}}} set-paused toggle && eww update notification-paused=$({{{dunstctl}}} is-paused)"
        (image :image-width {{{item-size}}}
               :image-height {{{item-size}}}
          :path { notification-paused ? "right/not_off.png" : "right/not_on.png" })))))

